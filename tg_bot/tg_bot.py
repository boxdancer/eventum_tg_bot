import logging
import os
import asyncio
import enum

from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


class ExamType(str, enum.Enum):
    OGE = "–û–ì–≠"
    EGE = "–ï–ì–≠"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[ExamType.OGE, ExamType.EGE]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    msg = "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Å–¥–∞–µ—à—å? :)"
    await update.message.reply_text(msg, reply_markup=reply_markup)
    logger.warning("Message shown to user: %s", msg)


async def send_delayed_message(update: Update, message: str, delay: int):
    await asyncio.sleep(delay)
    await update.message.reply_text(message)
    logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥: %s", delay, message)


async def handle_exam_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text

    if user_choice == ExamType.EGE.value:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        await update.message.reply_text("–í–æ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª")
        logger.warning("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        asyncio.create_task(send_delayed_message(update, "–í–æ—Ç –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª", 60))

    else:
        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–û–ì–≠", –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_choice}.")
        logger.warning("–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", user_choice)


async def main():
    bot = Bot(token=TOKEN)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    pending_updates = await bot.get_updates()
    logger.warning("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %s", len(pending_updates))

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_exam_choice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —à–∞–≥–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å event loop
    await app.initialize()
    await app.start()
    await app.updater.start_polling(drop_pending_updates=True)

    logger.warning("üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –¥–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
