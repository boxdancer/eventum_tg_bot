import logging
import os
import asyncio
import enum

from telegram import (
    Update,
    Bot,
    InlineKeyboardMarkup,
    InlineKeyboardButton, BotCommand,
    Message,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    Application,
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–¥–µ—Ä–∂–∫–∏
DELAY_MSG_1 = 4
DELAY_MSG_2 = 8


class ExamType(str, enum.Enum):
    OGE = "–û–ì–≠"
    EGE = "–ï–ì–≠"


class BotHandler:
    def __init__(self, token: str):
        self.token = token
        self.bot = Bot(token=self.token)
        self.application: Application = ApplicationBuilder().token(self.token).build()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[
            InlineKeyboardButton(text=ExamType.OGE, callback_data=ExamType.OGE),
            InlineKeyboardButton(text=ExamType.EGE, callback_data=ExamType.EGE),
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        msg = "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Å–¥–∞–µ—à—å? :)"
        if update.message:
            await update.message.reply_text(msg, reply_markup=reply_markup)
            logger.warning("/start triggered by user: %s", update.message.chat.username)

    async def handle_inline_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()
        user_choice = query.data
        username = query.from_user.name
        message = query.message

        match user_choice:
            case ExamType.EGE:
                asyncio.create_task(self.process_exam_choice(message, ExamType.EGE.value, username))
            case ExamType.OGE:
                asyncio.create_task(self.process_exam_choice(message, ExamType.OGE.value, username))

    async def process_exam_choice(self, message: Message, exam: str, username: str):
        await message.reply_text(f"–í–æ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª {exam}")
        logger.warning("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", exam, username)

        asyncio.create_task(self.send_delayed_message(message, f"–í–æ—Ç –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª {exam}", DELAY_MSG_1, username))
        asyncio.create_task(self.send_delayed_message(message, f"–í–æ—Ç —Ç—Ä–µ—Ç–∏–π —Ñ–∞–π–ª {exam}", DELAY_MSG_2, username))

    async def send_delayed_message(self, message: Message, text: str, delay: int, username: str):
        await asyncio.sleep(delay)
        await message.reply_text(text)
        logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s —Å–ø—É—Å—Ç—è %d —Å–µ–∫", username, delay)

    async def run(self):
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
        pending_updates = await self.bot.get_updates()
        logger.warning("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %s", len(pending_updates))

        await self.bot.set_my_commands([
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
        ])

        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.handle_inline_choice))

        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(drop_pending_updates=True)

        logger.warning("üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await asyncio.Event().wait()


if __name__ == "__main__":
    bot_handler = BotHandler(TOKEN)
    asyncio.run(bot_handler.run())
