import logging
import os
import asyncio

from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–∞–∫ –∏ –æ–±–µ—â–∞–ª –≤–æ—Ç —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã :)"
    await update.message.reply_text(msg)
    logger.warning("Message shown to user: %s", msg)

async def main():
    bot = Bot(token=TOKEN)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    pending_updates = await bot.get_updates()
    logger.warning("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %s", len(pending_updates))

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —à–∞–≥–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å event loop
    await app.initialize()
    await app.start()
    await app.updater.start_polling(drop_pending_updates=True)

    logger.warning("üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –¥–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())

