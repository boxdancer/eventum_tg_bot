import logging
import os
import asyncio
import enum

from telegram import (
    Update,
    Bot,
    InlineKeyboardMarkup,
    InlineKeyboardButton, BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
DELAY_MSG_MIN_20 = 4
DELAY_MSG_MIN_40 = 8


# –¢–∏–ø—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤
class ExamType(str, enum.Enum):
    OGE = "–û–ì–≠"
    EGE = "–ï–ì–≠"


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton(text=ExamType.OGE, callback_data=ExamType.OGE),
            InlineKeyboardButton(text=ExamType.EGE, callback_data=ExamType.EGE),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Å–¥–∞–µ—à—å? :)"
    await update.message.reply_text(msg, reply_markup=reply_markup)
    logger.warning("/start command triggered by user: %s", update.message.chat.username)


# –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_delayed_message(message, text: str, delay: int, user: str):
    await asyncio.sleep(delay)
    await message.reply_text(text)
    logger.warning("C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s —Å–ø—É—Å—Ç—è: %d —Å", user, delay)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def handle_inline_choice(update: Update, *args, **kwargs):
    query = update.callback_query
    await query.answer()

    user_choice = query.data

    match user_choice:
        case ExamType.EGE:
            await query.message.reply_text("–í–æ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ï–ì–≠")
            logger.warning("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ï–ì–≠ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", query.from_user.name)
            asyncio.create_task(
                send_delayed_message(query.message, "–í–æ—Ç –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –ï–ì–≠", DELAY_MSG_MIN_20, query.from_user.name))
            asyncio.create_task(
                send_delayed_message(query.message, "–í–æ—Ç —Ç—Ä–µ—Ç–∏–π —Ñ–∞–π–ª –ï–ì–≠", DELAY_MSG_MIN_40, query.from_user.name))
        case ExamType.OGE:
            await query.message.reply_text("–í–æ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –û–ì–≠")
            logger.warning("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –û–ì–≠ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", query.from_user.name)
            asyncio.create_task(
                send_delayed_message(query.message, "–í–æ—Ç –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –û–ì–≠", DELAY_MSG_MIN_20, query.from_user.name))
            asyncio.create_task(
                send_delayed_message(query.message, "–í–æ—Ç —Ç—Ä–µ—Ç–∏–π —Ñ–∞–π–ª –û–ì–≠", DELAY_MSG_MIN_40, query.from_user.name))
        case _:
            pass


# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    bot = Bot(token=TOKEN)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    pending_updates = await bot.get_updates()
    logger.warning("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %s", len(pending_updates))

    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ç
    ])

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_inline_choice))

    await app.initialize()
    await app.start()
    await app.updater.start_polling(drop_pending_updates=True)

    logger.warning("üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
